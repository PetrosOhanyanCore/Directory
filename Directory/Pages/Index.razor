@page "/"
@using Directory.Models;
@using Directory.Services;
@inject IDirectoryService _directoryService;

<PageTitle>Index</PageTitle>


<div>
    <MudTextField T="string"
                  @bind-Value="@_currentDirectory"
                  Label="Current Directory"
                  Variant="Variant.Text"
                  Immediate="true"
                  ReadOnly="true"
                  DebounceInterval="100"
                  Style="float:left">
    </MudTextField>
    <MudIconButton Icon="@Icons.Material.Filled.NavigateBefore"
                   Color="Color.Primary"
                   OnClick="()=> GoBack(_currentDirectory)"
                   Style="float:left" />
</div>

<div>
    <MudTable Items="response.data.folders" Hover="true" Striped="true" Dense="true" Class="mb-2" Style="float:left">
        <HeaderContent>
            <MudTh Style="color:red">Directory</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name" @onclick="() => GetContent(context.path)">@context.name</MudTd>
        </RowTemplate>
    </MudTable>

    <MudTable Items="response.data.files" Hover="true" Striped="true" Dense="true" Class="mb-2" Style="float:left">
        <HeaderContent>
            <MudTh Style="color:red">Files</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.name</MudTd>
            <MudTd DataLabel="Size">@context.size</MudTd>
        </RowTemplate>
    </MudTable>
</div>

@code {
    List<string> list = new();
    Response response = new Response();
    List<File> Files = new List<File>();
    List<Folder> Folders = new List<Folder>();

    private string _currentDirectory;


    async Task GetContent(string path)
    {
        response = new();
        response = await _directoryService.GetCurrentDirectoryContent(path);
        _currentDirectory = path;
    }

    async Task GoBack(string path)
    {
        response = new();

        string parent = await _directoryService.GetPrevious(path);

        response = await _directoryService.GetCurrentDirectoryContent(parent);
        _currentDirectory = parent;
    }

    async Task GetCurrentDirectory()
    {
        response.data.folders = new List<Folder>();
        response.data.files = new List<File>();
        _currentDirectory = await _directoryService.GetCurrentDirectory();
        response = await _directoryService.GetCurrentDirectoryContent(_currentDirectory);
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentDirectory();
    }
}
